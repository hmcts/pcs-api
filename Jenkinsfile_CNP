#!groovy

@Library("Infrastructure")

def type = "java"
def product = "pcs"
def component = "api"

def secrets = [
  'pcs-${env}': [
    secret('pcs-api-s2s-secret', 'PCS_API_S2S_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {

//  environment {
//    ALLURE_VERSION = "2.29.1"
//    PATH = "/usr/local/bin:$PATH"
//  }

  env.IDAM_S2S_AUTH_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  loadVaultSecrets(secrets)

  environment {
    PATH = "/path/to/allure/bin:$PATH"
  }

  onPR() {
    setPreviewEnvVars()
//    afterSuccess('smoketest:preview') {
//      runE2eTests(env.ENVIRONMENT)
//    }
  }
  onMaster() {
    setAatEnvVars()
    afterSuccess('smoketest:aat') {
      runE2eTests(env.ENVIRONMENT)
    }
  }

//  stages {
//    stage('Install Allure') {
//      steps {
//        script {
//          def allureDir = "/tmp/allure-${ALLURE_VERSION}"
//          sh """
//              curl -o allure.tgz -L https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz
//              tar -zxvf allure.tgz -C /tmp
//              sudo mv /tmp/allure-${ALLURE_VERSION} /usr/local/bin/allure
//          """
//        }
//      }
//    }
//  }

  afterAlways('functionalTest') {
    try {
      publishHTML([
        allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: "ReportForFunctionalTests",
        reportFiles: 'index.html',
        reportName: 'Functional Test Report'
      ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Report for Functional Tests/**/*'
    }
    catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    }
  }
}

def setPreviewEnvVars() {
  // TODO: Update URL to include XUI when available
  env.TEST_E2E_URL_WEB = "https://pcs-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.ENVIRONMENT= "preview"
}

def setAatEnvVars() {
  env.TEST_E2E_URL_WEB = "https://manage-case.aat.platform.hmcts.net/"
  env.ENVIRONMENT= "aat"
}

def runE2eTests(String context) {
  try {
    stage('E2E Test - ' + context) {
      sh './gradlew runE2eTests'
    }
  } finally {
    publishHTML([
      allowMissing: true,
      alwaysLinkToLastBuild: true,
      keepAll: true,
      reportDir: "src/e2eTest/playwright-report",
      reportFiles: 'index.html',
      reportName: 'E2E Test Report'
    ])
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'definitions/test/playwright-report/**'
  }
}
