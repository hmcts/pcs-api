server:
  port: 3206
  shutdown: "graceful"

# If you use a database then uncomment the `group:, readiness: and include: "db"` lines in the health probes and uncomment the datasource section
management:
  endpoint:
    health:
      show-details: "always"
      # group:
      #  readiness:
      #   include: "db"
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

springdoc:
  packages-to-scan:
    - uk.gov.hmcts.reform.pcs
  writer-with-order-by-keys: true

security:
  anonymousPaths:
    - "/health"
    - "/health/liveness"
    - "/health/readiness"
    - "/swagger-ui.html"
    - "/swagger-ui/**"
    - "/v3/api-docs/**"

spring:
  config:
    import: "optional:configtree:/mnt/secrets/pcs/"
  application:
    name: pcs api
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${PCS_DB_HOST:localhost}:${DB_PORT:5432}/${PCS_DB_NAME:pcs}${PCS_DB_OPTIONS:}
    username: ${PCS_DB_USER_NAME}
    password: ${PCS_DB_PASSWORD}
    properties:
      charSet: UTF-8
    hikari:
      minimumIdle: 2
      maximumPoolSize: 10
      idleTimeout: 10000
      poolName: PCSHikariCP
      maxLifetime: 7200000
      connectionTimeout: 30000
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            # silence the 'wall-of-text' - unnecessary exception throw about blob types
            non_contextual_creation: true
  jms:
    servicebus:
      enabled: ${HEARINGS_SERVICEBUS_ENABLED:false}
      connection-string: ${HEARINGS_SERVICEBUS_CONNECTION_STRING:}
      topic-client-id: ${HEARINGS_SERVICEBUS_TOPIC_CLIENT_ID:${spring.application.name}}
      pricing-tier: ${HEARINGS_SERVICEBUS_PRICING_TIER:standard}
      receive-timeout: ${HEARINGS_SERVICEBUS_RECEIVE_TIMEOUT:60000}
      idle-timeout: ${HEARINGS_SERVICEBUS_IDLE_TIMEOUT:600000}
      hearings-topic: ${HEARINGS_SERVICEBUS_TOPIC:hmc-to-cft-aat}
      hearings-subscription: ${HEARINGS_SERVICEBUS_SUBSCRIPTION:hmc-to-pcs-subscription-aat}
idam:
  s2s-auth:
    url: ${IDAM_S2S_AUTH_URL:http://localhost:4502}
    totp_secret: ${PCS_API_S2S_SECRET:AAAAAAAAAAAAAAAA}
    microservice: ${S2S_SERVICE_NAME:pcs_api}
  s2s-authorised:
    services: ${S2S_NAMES_WHITELIST:pcs_api,pcs_frontend}

azure:
  application-insights:
    instrumentation-key: ${pcs.AppInsightsInstrumentationKey:00000000-0000-0000-0000-000000000000}

hmc:
  deployment-id: ${HMC_DEPLOYMENT_ID:}
  api-url: ${HMC_API_URL:http://localhost:8084}
  serviceId: ${HMC_SERVICE_ID:AAA3}

notify:
  api-key: ${PCS_NOTIFY_API_KEY:AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}
