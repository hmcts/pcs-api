# PCS API Coding Standards

## General Guidelines
- Follow existing patterns in the codebase
- Keep code readable and maintainable
- Use meaningful variable and method names
- Add comments for complex logic only

## Package Organization
- Domain models: `uk.gov.hmcts.reform.pcs.ccd.domain`
- Wales-specific domain models: `uk.gov.hmcts.reform.pcs.ccd.domain.wales`
- Page configurations: `uk.gov.hmcts.reform.pcs.ccd.page.*`
- Services: `uk.gov.hmcts.reform.pcs.ccd.service`
- Wales-specific services: `uk.gov.hmcts.reform.pcs.ccd.service.wales`

## Naming Conventions
- Domain classes: Use descriptive names (e.g., `OccupationContractDetailsWales`)
- Page classes: No "Page" suffix - use the domain/feature name (e.g., `OccupationContractDetailsWales` for page config)
- Services: End with "Service" (e.g., `TenancyLicenceService`, `OccupationContractWalesService`)
- Enums: Use plural forms when appropriate (e.g., `EstateManagementGroundsWales`)

## Lombok Usage
- Use `@Slf4j` for logging
- Use `@Builder` for complex objects
- Use `@Data`, `@AllArgsConstructor`, `@NoArgsConstructor` for domain models
- Use `@AllArgsConstructor` for services (constructor injection)

## CCD-Specific
- Use `@CCD` annotation on fields that should be visible in CCD
- Fields without `@CCD` are for internal/backend use only and won't appear in UI
- Show conditions must use exact field names as defined in domain classes
- Use `CONTAINS` operator for multi-select list fields in show conditions
- Always include space before operators in show conditions (e.g., `field CONTAINS "VALUE"` not `fieldCONTAINS"VALUE"`)

## Field Declarations
- **No fully qualified types**: Use `Set<>` not `java.util.Set<>` (ensure proper imports)
- **Single-line fields**: Put field name on the same line as the type declaration
- **Import statements**: Always use imports for enums, domain classes, and utility classes - never use fully qualified names in declarations

**Example:**
```java
// ✅ Good
import uk.gov.hmcts.reform.pcs.ccd.domain.wales.OccupationContractTypeWales;
private OccupationContractTypeWales contractType;

// ✅ Good
import java.util.Set;
private Set<DiscretionaryGroundWales> discretionaryGroundsWales;

// ❌ Bad - fully qualified type in declaration
private uk.gov.hmcts.reform.pcs.ccd.domain.wales.OccupationContractTypeWales contractType;

// ❌ Bad - fully qualified collection type
private java.util.Set<DiscretionaryGroundWales>
    discretionaryGroundsWales;
```

**Exception**: Fully qualified names are acceptable in method references to resolve naming conflicts:
```java
// ✅ OK - using fully qualified name in method reference when there's a naming conflict
.mandatoryWithLabel(
    uk.gov.hmcts.reform.pcs.ccd.domain.wales.OccupationContractDetailsWales::getOccupationContractTypeWales,
    ""
)
```

## Multi-Line Conditions
- **Prefer single lines**: If a condition fits within 120 characters, keep it on one line
- **Only split when necessary**: Break lines only when they exceed the line length limit
- **Exception**: Method chaining (builders, streams, optionals) can span multiple lines for readability

## Testing
- Use JUnit 5 for all tests
- Use `@ParameterizedTest` for multiple test cases with different inputs
- Test class naming: `ClassNameTest`
- Test method naming: Use descriptive names with `should` prefix (e.g., `shouldValidateGroundsSelection`)

## Git Commit Messages
- Include JIRA ticket number at the start (e.g., "HDPI-2365: Add occupation contract details for Wales")
- Use present tense ("Add feature" not "Added feature")
- Keep first line under 72 characters
- Add detailed description in body if needed

## Files to Never Commit
- `.cursorrules` - Personal Cursor IDE configuration
- `.claude/` - Personal Claude AI configuration
- `pcs-api.code-workspace` - Personal VS Code workspace file
- Test data files in `src/main/resources/db/testdata/` unless explicitly required

## Wales-Specific Implementation
- Legislative country check: Use `LegislativeCountry.WALES` enum
- Separate Wales logic from England/existing logic
- Use dedicated Wales packages for domain models and services
- Don't modify existing England-specific services for Wales features
- Use conditional logic based on `legislativeCountry` in shared services

## Database Changes
- Use Flyway migrations for schema changes
- Naming: `V{number}__{description}.sql` (e.g., `V033__add_occupation_contract_details_column.sql`)
- Use JSONB columns for complex objects
- Always add `@JdbcTypeCode(SqlTypes.JSON)` annotation for JSONB fields in entities

## Checkstyle
- Line length limit: 120 characters
- Follow existing checkstyle rules in the project
- Fix checkstyle violations before committing

