import org.flywaydb.gradle.task.FlywayMigrateTask
import uk.gov.hmcts.rse.AuthMode
import uk.gov.hmcts.rse.CftlibExec

buildscript {
  ext {
    flywayVersion = '11.13.2'
    serenityBddVersion = '4.2.34'
  }
  dependencies {
    classpath("org.flywaydb:flyway-database-postgresql:$flywayVersion")
  }
}

plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.6'
  id 'com.github.ben-manes.versions' version '0.53.0'
  id 'org.flywaydb.flyway' version "$flywayVersion"
  id 'org.sonarqube' version '6.3.1.5724'
  id 'net.serenity-bdd.serenity-gradle-plugin' version "$serenityBddVersion"
  id 'hmcts.ccd.sdk' version '6.1.0'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.1893'
  id 'io.freefair.lombok' version '8.14.2'
  id 'au.com.dius.pact' version '4.6.17'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.67'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  cftlibTestImplementation.extendsFrom testImplementation
  cftlibTestRuntime.extendsFrom testRuntime

  mockitoAgentConfig
  mockitoAgent {
    transitive = false
  }
}

ccd {
  configDir = file('build/definitions')
  decentralised = true
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  maxParallelForks = 1

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "verification"
  dependsOn assemble, testClasses
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = configurations.functionalTestRuntimeClasspath + sourceSets.functionalTest.output

  useJUnitPlatform {
    includeTags System.getProperty("tags", "Functional")
  }

  doFirst {
    delete "${rootDir}/target/site/serenity"
    delete "${rootDir}/report-for-functional-tests"
    logger.quiet("Functional test results directory cleaned before running functional tests")
  }

  finalizedBy {
    aggregate {
      doLast {
        new File("${rootDir}/report-for-functional-tests").mkdirs()
        file("${rootDir}/target/site/serenity").renameTo(file("${rootDir}/report-for-functional-tests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/report-for-functional-tests/index.html")
      }
    }
  }
  testLogging {
    events "PASSED", "SKIPPED", "FAILED"
  }
}
functional.finalizedBy(aggregate)

serenity {
  reports = ["single-page-html"]
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('yarnInstall', Exec) {
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'install'
}

tasks.register('runE2eChromeTests', Exec) {
  dependsOn yarnInstall
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'test:chrome'
}

tasks.register('runE2eFirefoxTests', Exec) {
  dependsOn yarnInstall
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'test:firefox'
}

tasks.register('contract', Test) {
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.rootDir', "pacts"
}

tasks.register('runAndPublishConsumerPactTests', Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

tasks.register('fortifyScan', JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
  pacticipantVersion = getCheckedOutGitCommitHash()
  pacticipant = 'pcs_api'
}

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion
  }
}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

jacocoTestReport {
  executionData(test, integration, cftlibTest)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

tasks.named('sonarqube') {
  dependsOn jacocoTestReport
}

tasks.named('check') {
  dependsOn integration
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: pcs-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:pcs-api"
    property "sonar.exclusions", ".github/workflows/publish-openapi.yaml"
    property "sonar.coverage.exclusions", "**/config/**/*Configuration.java," +
      "**/*Constants.java," +
      "**/model/*.java," +
      "**/uk/gov/hmcts/reform/pcs/Application.java," +
      "**/uk/gov/hmcts/reform/pcs/config/*.java," +
      "**/uk/gov/hmcts/reform/pcs/ccd/accesscontrol/**/*.java," +
      "**/uk/gov/hmcts/reform/pcs/ccd/config/HighLevelDataSetupApp.java," +
      "**/uk/gov/hmcts/reform/pcs/ccd/domain/**/*.java," +
      "**/uk/gov/hmcts/reform/pcs/ccd/entity/**/*.java," +
      "**/entities/**," + "**/model/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'}
}

ext {
  log4JVersion = "2.25.2"
  logbackVersion = "1.5.20"
  testcontainersVersion = "1.21.3"
  springFrameworkBootVersion = "3.5.6"
  lombokVersion = "1.18.42"
  springSecurityVersion = "6.5.5"
  pactVersion = "4.6.17"
  tomcatEmbedVersion = "11.0.11"
  nettyVersion = "4.1.127.Final"
}

ext['snakeyaml.version'] = '2.0'
ext['netty.version'] = nettyVersion

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springFrameworkBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springFrameworkBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springFrameworkBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: springFrameworkBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springFrameworkBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springFrameworkBootVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springFrameworkBootVersion

  runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: flywayVersion

  implementation group: 'org.flywaydb', name: 'flyway-core', version: flywayVersion
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.13'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '5.2.1-RELEASE'
  implementation platform(group: 'com.azure.spring', name :'spring-cloud-azure-dependencies', version :'6.0.0')
  implementation "com.azure.spring:spring-cloud-azure-starter-servicebus-jms"
  implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.2.5'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '5.2.0'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'
  implementation group: 'com.github.hmcts', name: 'doc-assembly-client', version: '2.2.0'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.8'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
  implementation group: 'io.pebbletemplates', name: 'pebble', version: '3.2.4'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.6.0'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.19.0'
  implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  implementation group: 'com.github.kagkarlsson', name: 'db-scheduler-spring-boot-starter', version: '16.1.0'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: tomcatEmbedVersion
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: tomcatEmbedVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.6'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.10', classifier: 'all'
  testImplementation group: 'org.instancio', name: 'instancio', version: '1.0.4'

  implementation(group: 'com.github.hmcts', name: 'befta-fw', version: '9.2.4') {
    exclude group: 'org.apache.commons', module: 'commons-compress'
    exclude group: 'com.google.guava', module: 'guava'
    exclude group: 'org.apache.poi', module: 'poi-ooxml'
    exclude group: 'org.apache.poi', module: 'poi'
    exclude group: 'com.launchdarkly', module: 'launchdarkly-java-server-sdk'
  }

  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: serenityBddVersion
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: serenityBddVersion
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: serenityBddVersion
  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '6.0.0'

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: pactVersion
  contractTestImplementation group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:6.0.0')
  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  testImplementation(platform('org.junit:junit-bom:6.0.0'))
  testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: springSecurityVersion
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springFrameworkBootVersion) {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
  testImplementation group: 'org.testcontainers', name: 'testcontainers', version: testcontainersVersion
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: testcontainersVersion
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainersVersion

  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.1.4'

  // Allow fast reloading during dev; recompile a class to trigger fast reload + definition reimport.
  cftlibImplementation 'org.springframework.boot:spring-boot-devtools'

  mockitoAgentConfig group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
  mockitoAgent 'org.mockito:mockito-core'

}

application {
  mainClass = 'uk.gov.hmcts.reform.pcs.Application'
}

bootJar {
  archiveFileName = "pcs-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

tasks.register('migratePostgresDatabase', FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

project.tasks.named("generateCCDConfig") {
  environment 'SPRING_PROFILES_ACTIVE', 'config-gen'
  environment 'SPRING_FLYWAY_ENABLED', 'false'
  environment 'PCS_DB_USER_NAME', 'postgres'
  environment 'PCS_DB_PASSWORD', 'postgres'
  environment 'DB_PORT', '6432'
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
project.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

tasks.named('test') {
  doFirst {
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
  }
}

tasks.named('integration') {
  doFirst {
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
  }
}

tasks.withType(CftlibExec).configureEach {
  group = 'ccd tasks'
  authMode = AuthMode.Local

  //Attach mockito agent for inline mocking to remove warning in logs
  classpath += configurations.mockitoAgentConfig
  doFirst {
    def mockitoAgentJar = configurations.mockitoAgent.singleFile
    jvmArgs += ["-javaagent:${mockitoAgentJar}", "-Xshare:off"]
    logger.quiet("Attaching Mockito Java agent for inline mocking")
  }

  environment 'RSE_LIB_ADDITIONAL_DATABASES', 'pcs'
  environment 'PCS_DB_USER_NAME', 'postgres'
  environment 'PCS_DB_PASSWORD', 'postgres'
  environment 'PCS_DB_PORT', '6432'
  environment 'CCD_DECENTRALISED_CASE-TYPE-SERVICE-URLS_PCS', 'http://localhost:3206'
  environment 'SPRING_FLYWAY_ENABLED', 'true'
  environment 'SPRING_PROFILES_ACTIVE', 'dev'
  environment 'XUI_JURISDICTIONS', 'PCS'
  environment 'XUI_DOCUMENTS_API_V2', 'http://ccd-case-document-am-api-aat.service.core-compute-aat.internal'
//  environment 'IDAM_S2S_URL', 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
}

tasks.register('highLevelDataSetup', JavaExec) {
  mainClass.set("uk.gov.hmcts.reform.pcs.ccd.config.HighLevelDataSetupApp")
  classpath += sourceSets.main.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

// Ensure we cover Cftlib dev & test with our CI checks
check.dependsOn cftlibTest

tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

tasks.named("processContractTestResources") {
  duplicatesStrategy = 'include'
}

tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

tasks.withType(Wrapper) {
  distributionType = Wrapper.DistributionType.ALL
}
