import org.flywaydb.gradle.task.FlywayMigrateTask
import uk.gov.hmcts.rse.AuthMode
import uk.gov.hmcts.rse.CftlibExec

buildscript {
  ext {
    flywayVersion = '11.7.2'
  }
  dependencies {
    classpath "org.flywaydb:flyway-database-postgresql:$flywayVersion"
  }
}

plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.4'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.flywaydb.flyway' version "$flywayVersion"
  id 'org.sonarqube' version '6.1.0.5360'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.22'
  id 'hmcts.ccd.sdk' version '5.5.19'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.1668'
  id 'io.freefair.lombok' version '8.13.1'
  id 'au.com.dius.pact' version '4.6.17'
  id 'uk.gov.hmcts.java' version '0.12.65'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  mainClass = 'uk.gov.hmcts.reform.pcs.Application'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

sourceSets {
  create("functionalTest") {
    java.srcDir file("src/functionalTest/java")
    resources.srcDir file("src/functionalTest/resources")
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
  create("integrationTest") {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
    java.srcDir file("src/integrationTest/java")
    resources.srcDir file("src/integrationTest/resources")
  }
  create("smokeTest") {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
    java.srcDir file("src/smokeTest/java")
    resources.srcDir file("src/smokeTest/resources")
  }
  create("contractTest") {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
    java.srcDir file("src/contractTest/java")
    resources.srcDir file("src/contractTest/resources")
  }
}

configurations {
  functionalTestImplementation {
    extendsFrom configurations.testImplementation
  }
  functionalTestRuntimeOnly {
    extendsFrom configurations.runtimeOnly
  }

  integrationTestImplementation {
    extendsFrom configurations.testImplementation
  }
  integrationTestRuntimeOnly {
    extendsFrom configurations.runtimeOnly
  }

  contractTestImplementation {
    extendsFrom configurations.testImplementation
  }
  contractTestRuntimeOnly {
    extendsFrom configurations.runtimeOnly
  }

  smokeTestImplementation {
    extendsFrom configurations.testImplementation
  }
  smokeTestRuntimeOnly {
    extendsFrom configurations.runtimeOnly
  }

  cftlibTestImplementation {
    extendsFrom configurations.testImplementation
  }
  cftlibTestRuntimeOnly {
    extendsFrom configurations.testRuntimeOnly
  }
}

ext {
  flywayVersion = '11.7.0'
  springBootVersion = '3.2.4'
  springDocVersion = '2.8.6'
  notifyClientVersion = '5.2.1-RELEASE'
  hmctsLoggingVersion = '6.1.8'
  serviceAuthVersion = '5.3.0'
  log4JVersion = '2.24.3'
  logbackVersion = '1.5.18'
  lombokVersion = '1.18.36'
  postgresVersion = '42.7.5'
  serenityVersion = '4.2.17'
  swaggerAnnotationsVersion = '2.2.30'
  junitPlatformVersion = '1.12.1'
  springSecurityTestVersion = '6.4.4'
  azureSpringVersion = '5.21.0'
  openFeignVersion = '4.2.1'
  pactVersion = '4.6.17'
  junitBomVersion = '5.12.1'
  ccdClientVersion = '5.0.3'
  idamClientVersion = '3.0.3'
  hamcrestVersion = '2.0.0.0'
  snakeyamlVersion = '2.2'
}

dependencies {
  // Spring Boot
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-aop"
  implementation "org.springframework.boot:spring-boot-starter-json"
  implementation "org.springframework.boot:spring-boot-starter-jdbc"
  implementation "org.springframework.boot:spring-boot-starter-security"

  // SpringDoc & OpenAPI
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocVersion"

  // Flyway
  implementation "org.flywaydb:flyway-core:$flywayVersion"
  runtimeOnly "org.flywaydb:flyway-database-postgresql:$flywayVersion"

  // Azure
  implementation platform("com.azure.spring:spring-cloud-azure-dependencies:$azureSpringVersion")
  implementation "com.azure.spring:spring-cloud-azure-starter-servicebus-jms"

  // HMCTS
  implementation "com.github.hmcts.java-logging:logging:$hmctsLoggingVersion"
  implementation "com.github.hmcts:ccd-client:$ccdClientVersion"
  implementation "com.github.hmcts:idam-java-client:$idamClientVersion"
  implementation "com.github.hmcts:service-auth-provider-java-client:$serviceAuthVersion"

  // GOV.UK Notify
  implementation "uk.gov.service.notify:notifications-java-client:$notifyClientVersion"

  // Logging
  implementation "org.apache.logging.log4j:log4j-api:$log4JVersion"
  implementation "org.apache.logging.log4j:log4j-to-slf4j:$log4JVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"
  implementation "ch.qos.logback:logback-core:$logbackVersion"

  // PostgreSQL
  implementation "org.postgresql:postgresql:$postgresVersion"

  // OpenFeign
  implementation "org.springframework.cloud:spring-cloud-starter-openfeign:$openFeignVersion"

  // Lombok
  implementation "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"

  // REST Assured
  implementation "io.rest-assured:rest-assured"

  // Functional Tests - Serenity
  functionalTestImplementation "net.serenity-bdd:serenity-rest-assured:$serenityVersion"
  functionalTestImplementation "net.serenity-bdd:serenity-core:$serenityVersion"
  functionalTestImplementation "net.serenity-bdd:serenity-junit5:$serenityVersion"

  // Contract Tests - Pact
  contractTestImplementation "au.com.dius.pact.consumer:junit5:$pactVersion"
  contractTestImplementation "org.hamcrest:java-hamcrest:$hamcrestVersion"
  contractTestImplementation "org.junit.jupiter:junit-jupiter-api:$junitBomVersion"

  // JUnit & Spring Testing
  testImplementation platform("org.junit:junit-bom:$junitBomVersion")
  testImplementation "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion"
  testImplementation "org.springframework.security:spring-security-test:$springSecurityTestVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: "junit", module: "junit"
    exclude group: "org.junit.vintage", module: "junit-vintage-engine"
  }

  // Dev Tools
  cftlibImplementation "org.springframework.boot:spring-boot-devtools"
}

bootJar {
  archiveFileName = "pcs-api.jar"
  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

tasks.register('migratePostgresDatabase', FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs += ["-Xlint:unchecked", "-Werror"]
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  testLogging.exceptionFormat = 'full'
}

tasks.register('functional', Test) {
  group = 'verification'
  description = 'Runs functional tests'
  dependsOn assemble, testClasses
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = configurations.functionalTestRuntimeClasspath
  useJUnitPlatform { includeTags System.getProperty("tags", "Functional") }

  doFirst {
    delete "${rootDir}/target/site/serenity", "${rootDir}/report-for-functional-tests"
    logger.quiet("Functional test results directory cleaned before running functional tests")
  }

  doLast {
    file("${rootDir}/report-for-functional-tests").mkdirs()
    file("${rootDir}/target/site/serenity").renameTo(file("${rootDir}/report-for-functional-tests"))
    logger.quiet("Functional test report moved to ---> file://${rootDir}/report-for-functional-tests/index.html")
  }

  finalizedBy("aggregate")
}

//tasks.named("aggregate") {
//  doLast {
//    file("${rootDir}/report-for-functional-tests").mkdirs()
//    file("${rootDir}/target/site/serenity").renameTo(file("${rootDir}/report-for-functional-tests"))
//    logger.quiet("Functional test report moved to ---> file://${rootDir}/report-for-functional-tests/index.html")
//  }
//}

serenity {
  reports = ["single-page-html"]
}

tasks.register('integration', Test) {
  description = 'Runs integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true // Consistent with smoke, contract and pact.
}

tasks.register('smoke', Test) {
  description = 'Runs smoke tests'
  group = 'verification'
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

['runE2eTests', 'runE2eChromeTests', 'runE2eFirefoxTests'].each { taskName ->
  tasks.register(taskName, Exec) {
    dependsOn 'yarnInstall'
    workingDir = file("${project.projectDir}/src/e2eTest")
    commandLine 'yarn', taskName.replace('runE2e', 'test:')
  }
}

tasks.register('yarnInstall', Exec) {
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'install'
}

tasks.register('contract', Test) {
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.rootDir', "pacts"
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

ext.pactVersion = getCheckedOutGitCommitHash()

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion
  }
}

tasks.register('runAndPublishConsumerPactTests', Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  dependsOn 'contract'
  finalizedBy 'pactPublish'
}

ccd {
  configDir = file('build/definitions')
}

jacocoTestReport {
  executionData(test, integration, cftlibTest)
  reports {
    xml.required = true
    html.required = true
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: pcs-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:pcs-api"
    property "sonar.coverage.exclusions", "**/config/**/*Configuration.java,**/*Constants.java,**/model/*.java,**/uk/gov/hmcts/reform/pcs/Application.java"
  }
}

check.dependsOn jacocoTestReport, integration, cftlibTest

dependencyUpdates {
  rejectVersionIf {
    def isNonStable = { v ->
      !['RELEASE', 'FINAL', 'GA'].any { q -> v.toUpperCase().contains(q) } && !(v ==~ /^[0-9,.v-]+$/)
    }
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

["processIntegrationTestResources", "processContractTestResources"].each {
  rootProject.tasks.named(it) {
    duplicatesStrategy = 'include'
  }
}

tasks.withType(CftlibExec).configureEach {
  group = 'ccd tasks'
  authMode = AuthMode.Local
  environment 'SPRING_PROFILES_ACTIVE', 'dev'
}
