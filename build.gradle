plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.1'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'io.qameta.allure' version '2.12.0'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.64'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  cucumberRuntime {
    extendsFrom testImplementation
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: JavaExec) {
  description = "Runs functional tests"
  group = "verification"
  dependsOn assemble, testClasses
  mainClass = "io.cucumber.core.cli.Main"
  classpath = configurations.functionalTestRuntimeClasspath + sourceSets.functionalTest.output

  args = [
    '--threads', '1',
    '--plugin', "json:${buildDir}/allure-results/cucumber.json",
    '--plugin', "io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm",
    '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
    '--tags', '',
    '--glue', 'uk.gov.hmcts.reform.pcs',
    'src/functionalTest/resources/features'
  ]

  jvmArgs "-Dlogback.statusListenerClass=ch.qos.logback.core.status.NopStatusListener"
  systemProperty 'allure.results.directory', "$buildDir/allure-results"

  doFirst {
    delete "${buildDir}/allure-results"
    delete "${buildDir}/reports/allure-report/allureReport"
    logger.quiet("Allure results directory cleaned before running functional tests")
  }

  finalizedBy {
    allureReport {
      doLast {
        new File("${rootDir}/ReportForFunctionalTests").mkdirs()
        file("${buildDir}/reports/allure-report/allureReport").renameTo(file("${rootDir}/ReportForFunctionalTests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/ReportForFunctionalTests/index.html")
      }
    }
  }
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task yarnInstall(type:Exec) {
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'install'
}

task runE2eTests(type: Exec) {
  dependsOn yarnInstall
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'test:functional'
}

task runE2eChromeTests(type: Exec) {
  dependsOn yarnInstall
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'test:chrome'
}

task runE2eFirefoxTests(type: Exec) {
  dependsOn yarnInstall
  workingDir = file("${project.projectDir}/src/e2eTest")
  commandLine 'yarn', 'test:firefox'
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: pcs-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:pcs-api"
    property "sonar.coverage.exclusions", "**/config/**/*Configuration.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.24.3"
  logbackVersion = "1.5.16"
}

ext['snakeyaml.version'] = '2.0'

def allureVersion = "2.29.1"
def aspectJVersion = "1.9.20.1"

configurations {
  agent {
    canBeResolved = true
    canBeConsumed = true
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.4'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.7'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.5'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.0'
  implementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
  testImplementation "io.qameta.allure:allure-cucumber7-jvm"
  testImplementation "io.qameta.allure:allure-junit-platform"
  testImplementation group: 'io.qameta.allure', name: 'allure-commandline', version: '2.32.0', ext: 'pom'
  testImplementation group: 'io.cucumber', name: 'cucumber-java', version: '7.20.1'
  testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.20.1'
  testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '1.11.4'
  agent "org.aspectj:aspectjweaver:$aspectJVersion"
  testImplementation "io.qameta.allure:allure-junit4-aspect"

  testImplementation(platform('org.junit:junit-bom:5.11.4'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

test {
  jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

mainClassName = 'uk.gov.hmcts.reform.pcs.Application'

bootJar {
  archiveFileName = "pcs-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
