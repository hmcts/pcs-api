#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 07 * * 1-5')]),
  parameters([
    choice(
      name: 'ENIRONMENT',
      choices: ['aat', 'preview'],
      description: 'Environment to run the test.'
    ),
    string(
      name: 'PR_NUMBER',
      defaultValue: '',
      description: 'PR number (REQUIRED if environment is preview, leave blank otherwise).'
    ),
    booleanParam(
      name: 'CHROME_TESTS',
      defaultValue: true,
      description: 'Tick the checkbox to run E2E tests in Chrome.'
    ),
    booleanParam(
      name: 'FIREFOX_TESTS',
      defaultValue: true,
      description: 'Tick the checkbox to run E2E tests in Firefox.'
    ),
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "pcs"
def component = "api"

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    envVariable: envVariable
  ]
}

def secrets = [
  'pcs-${env}': [
    secret('pcs-api-idam-secret', 'PCS_API_IDAM_SECRET'),
    secret('idam-system-user-name', 'IDAM_SYSTEM_USERNAME'),
    secret('idam-system-user-password', 'IDAM_SYSTEM_USER_PASSWORD'),
    secret('pcs-idam-test-user-password', 'PCS_IDAM_TEST_USER_PASSWORD'),
    secret('pcs-caseworker-username', 'PCS_CASEWORKER_USERNAME'),
    secret('pcs-caseworker-password', 'PCS_CASEWORKER_PASSWORD'),
  ]
]

withNightlyPipeline(type, product, component) {
  enableSlackNotifications('#pcs-tech')
  loadVaultSecrets(secrets)
  afterAlways('DependencyCheckNightly') {
    handleEnvironmentSetting(params.ENVIRONMENT, params.PR_NUMBER)
    runE2eTests(params.CHROME_TESTS, params.FIREFOX_TESTS)
    publishE2EReport()
  }
}

def handleEnvironmentSetting(String environment, String prNumber) {
  if (environment == 'preview' && prNumber != '') {
    env.MANAGE_CASE_BASE_URL = "https://xui-pcs-api-pr-${prNumber}.preview.platform.hmcts.net"
  } else {
    env.MANAGE_CASE_BASE_URL = "https://manage-case.${environment}.platform.hmcts.net/"
  }
}

def runE2eTests(Boolean isChrome, Boolean isFirefox) {
  if (isChrome) {
    runE2ETestForBrowser('Chrome')
  }
  if (isFirefox) {
    runE2ETestForBrowser('Firefox')
  }
}

def runE2ETestForBrowser(String browser) {
  stage("Full E2E Test - ${browser}") {
    try {
      sh "./gradlew runE2e${browser}Tests"
    } catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    }
  }
}

def publishE2EReport() {
  stage("Publish E2E Test Report") {
    publishHTML([
      allowMissing: true,
      alwaysLinkToLastBuild: true,
      keepAll: true,
      reportDir: "src/e2eTest/allure-report",
      reportFiles: 'index.html',
      reportName: "Full EXUI E2E Test Report"
    ])
  }
}
